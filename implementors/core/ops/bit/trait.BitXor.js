(function() {var implementors = {};
implementors["bitmaps"] = [{"text":"impl&lt;Size:&nbsp;Bits&gt; BitXor&lt;Bitmap&lt;Size&gt;&gt; for Bitmap&lt;Size&gt;","synthetic":false,"types":[]}];
implementors["maybe_owned"] = [{"text":"impl&lt;'min, L, R, OUT:&nbsp;'min&gt; BitXor&lt;MaybeOwned&lt;'min, R&gt;&gt; for MaybeOwned&lt;'min, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: BitXor&lt;R, Output = OUT&gt; + BitXor&lt;&amp;'min R, Output = OUT&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'min L: BitXor&lt;R, Output = OUT&gt; + BitXor&lt;&amp;'min R, Output = OUT&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'min, L, R, OUT:&nbsp;'min&gt; BitXor&lt;MaybeOwnedMut&lt;'min, R&gt;&gt; for MaybeOwnedMut&lt;'min, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: BitXor&lt;R, Output = OUT&gt; + BitXor&lt;&amp;'min R, Output = OUT&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'min L: BitXor&lt;R, Output = OUT&gt; + BitXor&lt;&amp;'min R, Output = OUT&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl BitXor&lt;B0&gt; for B0","synthetic":false,"types":[]},{"text":"impl BitXor&lt;B0&gt; for B1","synthetic":false,"types":[]},{"text":"impl BitXor&lt;B1&gt; for B0","synthetic":false,"types":[]},{"text":"impl BitXor&lt;B1&gt; for B1","synthetic":false,"types":[]},{"text":"impl&lt;Ur:&nbsp;Unsigned&gt; BitXor&lt;Ur&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, Bl:&nbsp;Bit, Ur:&nbsp;Unsigned&gt; BitXor&lt;Ur&gt; for UInt&lt;Ul, Bl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;UInt&lt;Ul, Bl&gt;: PrivateXor&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;PrivateXorOut&lt;UInt&lt;Ul, Bl&gt;, Ur&gt;: Trim,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()